#!/usr/bin/env bash

tool_name="compose-tools"
default_dir=".config/${tool_name}"
running_dir=~/"${default_dir}"
yaml_dir_pattern="*/*yaml.d/*.yml"
env_files_pattern="*/env.d/*"

recreate_env() {
    pushd . >/dev/null
    cd "${running_dir}"
    # "${basedir}/resolve-template-env-dir.sh"
    if [ "$(echo ${env_files_pattern})" != "${env_files_pattern}" ]
    then
        echo "# DO NOT MODIFY THIS FILE" > .env-template
        echo "# This file has been generated by ${tool_name}. Use ct-* commands" >> .env-template
        echo "" >> .env-template
        cat ${env_files_pattern} >> .env-template
        "${basedir}/resolve-template-env-file.sh" .env-template .env
    fi
    popd >/dev/null
}

get_include() {
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo ${yaml_dir_pattern})" != "${yaml_dir_pattern}" ]
    then
        grep -l "^#:include" ${yaml_dir_pattern}
    fi
    popd >/dev/null
}

get_daemon() {
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo ${yaml_dir_pattern})" != "${yaml_dir_pattern}" ]
    then
        grep -oh "^#:daemon:.*" ${yaml_dir_pattern} | sed -e 's/.*://'
    fi
    popd >/dev/null
}

get_interactive() {
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo ${yaml_dir_pattern})" != "${yaml_dir_pattern}" ]
    then
        grep -oh "^#:interactive:.*" ${yaml_dir_pattern} | sed -e 's/.*://'
    fi
    popd >/dev/null
}

get_enter() {
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo ${yaml_dir_pattern})" != "${yaml_dir_pattern}" ]
    then
        grep -oh "^#:enter:.*" ${yaml_dir_pattern} | sed -e 's/.*:enter://'
    fi
    popd >/dev/null
}

enter() {
    container="$1"
    comm=$(get_enter | grep "^${container}:" | sed -e 's/.*://')
    if [ -n "${comm}" ]
    then
        docker exec -ti "${container}" ${comm}
    else
        echo "No enter command for container [${container}]"
    fi
}

base-compose() {
    pushd . >/dev/null
    cd "${running_dir}"
    docker-compose -p docker ${CONFIG_FILES} "$@"
    popd >/dev/null
}


run_phase() {
    phase_category="$1"
    phase_name="$2"
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo */${phase_category}/"${phase_name}"/*)" != "*/${phase_category}/${phase_name}/*" ]
    then
        for scriptname in */${phase_category}/"${phase_name}"/*
        do
            bash "${scriptname}"
        done
    fi
    popd >/dev/null
}

run_pre_phase() {
    phase_name="$1"
    run_phase "pre" "${phase_name}"
}

run_post_phase() {
    phase_name="$1"
    run_phase "post" "${phase_name}"
}

install() {
    pushd . >/dev/null
    cd "${running_dir}"
    mkdir -p "${HOME}/bin"
    for scriptfullname in "${basedir}/ct-"*
    do
        scriptname="$(basename "${scriptfullname}")"
        [ -f "${HOME}/bin/${scriptname}" ] || ln -s "${basedir}/${scriptname}" "${HOME}/bin/${scriptname}"
    done
    popd >/dev/null
}

up() {
    run_pre_phase "up"

    base-compose up -d $(get_daemon)

    run_post_phase "up"
}

interactive() {
    run_pre_phase "interactive"

    if [ "$1" != "" ]
    then
        base-compose run --rm "$@"
    else
        echo Possible choices : $(get_interactive)
    fi

    run_post_phase "interactive"
}

down() {
    run_pre_phase "down"

    base-compose down

    run_post_phase "down"
}

config() {
    run_pre_phase "config"

    base-compose config

    run_post_phase "config"
}

compose() {
    run_pre_phase "compose"

    base-compose "$@"

    run_post_phase "compose"
}

init() {
    path="$1"
    [ -z "${path}" ] && path="."

    name="$2"
    [ -z "${name}" ] && name=$(basename "$(readlink -f "${path}")")


    echo "Init a ${tool_name} repo in path [${path}] using name [${name}] (Y/n) ?"
    read answer

    if [ "${answer}" == "y" ] || [ "${answer}" == "Y" ] || [ -z "${answer}" ]
    then
        run_pre_phase "init"
        mkdir -p "${path}/yaml.d"
        mkdir -p "${path}/env.d"
        readme="${path}/README.md"
        if [ ! -d "${readme}" ]
        then
            echo "This repository contains configuration for [${tool_name}]." > "${readme}"
            echo "" >> "${readme}"
            echo "To use it in [${tool_name}], just link this folder in ~/${default_dir}/${name} (or replace ${name} by any name you want this repo to refer)." >> "${readme}"
            echo "" >> "${readme}"
            echo "Example:" >> "${readme}"
            echo "" >> "${readme}"
            echo '```'"sh" >> "${readme}"
            echo "ln -s /path/to/repo ~/${default_dir}/${name}" >> "${readme}"
            echo '```' >> "${readme}"
            echo "" >> "${readme}"
            echo "And compose files from this repo will be usable by [${tool_name}]." >> "${readme}"
            echo "" >> "${readme}"
            echo "[${tool_name}]: https://github.com/gissehel/compose-tools" >> "${readme}"
        fi
        git init .
        [ -e "${running_dir}/${name}" ] || ln -s "$(readlink -f ${path})" "${running_dir}/${name}"
        run_post_phase "init"
    else
        echo "Aborting..."
    fi
}

mkdir -p "${running_dir}"

run_pre_phase "env"

recreate_env
CONFIG_FILES=""

for FILE_PREFIX in $(get_include)
do
    CONFIG_FILES="${CONFIG_FILES} -f ${FILE_PREFIX}"
done

