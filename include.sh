#!/usr/bin/env bash

running_dir=~/.config/compose-tools
yaml_dir_pattern="*/*yaml.d/*.yml"
env_files_pattern="*/env.d/*"

recreate_env() {
    pushd . >/dev/null
    cd "${running_dir}"
    # "${basedir}/resolve-template-env-dir.sh"
    if [ "$(echo ${env_files_pattern})" != "${env_files_pattern}" ]
    then
        echo "# DO NOT MODIFY THIS FILE" > .env-template
        echo "# This file has been generated by compose-tools. Use ct-* commands" >> .env-template
        echo "" >> .env-template
        cat ${env_files_pattern} >> .env-template
        "${basedir}/resolve-template-env-file.sh" .env-template .env
    fi
    popd >/dev/null
}

get_include() {
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo ${yaml_dir_pattern})" != "${yaml_dir_pattern}" ]
    then
        grep -l "^#:include" ${yaml_dir_pattern}
    fi
    popd >/dev/null
}

get_daemon() {
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo ${yaml_dir_pattern})" != "${yaml_dir_pattern}" ]
    then
        grep -oh "^#:daemon:.*" ${yaml_dir_pattern} | sed -e 's/.*://'
    fi
    popd >/dev/null
}

get_interactive() {
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo ${yaml_dir_pattern})" != "${yaml_dir_pattern}" ]
    then
        grep -oh "^#:interactive:.*" ${yaml_dir_pattern} | sed -e 's/.*://'
    fi
    popd >/dev/null
}

get_enter() {
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo ${yaml_dir_pattern})" != "${yaml_dir_pattern}" ]
    then
        grep -oh "^#:enter:.*" ${yaml_dir_pattern} | sed -e 's/.*:enter://'
    fi
    popd >/dev/null
}

enter() {
    container="$1"
    comm=$(get_enter | grep "^${container}:" | sed -e 's/.*://')
    if [ -n "${comm}" ]
    then
        docker exec -ti "${container}" ${comm}
    else
        echo "No enter command for container [${container}]"
    fi
}

compose() {
    pushd . >/dev/null
    cd "${running_dir}"
    docker-compose -p docker ${CONFIG_FILES} "$@"
    popd >/dev/null
}


run_phase() {
    phase_category="$1"
    phase_name="$2"
    pushd . >/dev/null
    cd "${running_dir}"
    if [ "$(echo */${phase_category}/"${phase_name}"/*)" != "*/${phase_category}/${phase_name}/*" ]
    then
        for scriptname in */${phase_category}/"${phase_name}"/*
        do
            bash "${scriptname}"
        done
    fi
    popd >/dev/null
}

run_pre_phase() {
    phase_name="$1"
    run_phase "pre" "${phase_name}"
}

run_post_phase() {
    phase_name="$1"
    run_phase "post" "${phase_name}"
}

install() {
    pushd . >/dev/null
    cd "${running_dir}"
    mkdir -p "${HOME}/bin"
    for scriptfullname in "${basedir}/ct-"*
    do
        scriptname="$(basename "${scriptfullname}")"
        [ -f "${HOME}/bin/${scriptname}" ] || ln -s "${basedir}/${scriptname}" "${HOME}/bin/${scriptname}"
    done
    popd >/dev/null
}

mkdir -p "${running_dir}"

run_pre_phase "env"

recreate_env
CONFIG_FILES=""

for FILE_PREFIX in $(get_include)
do
    CONFIG_FILES="${CONFIG_FILES} -f ${FILE_PREFIX}"
done

